// ADKPCÜ/01 - Algorithmen

/*_________________________________
Aufgabe 1.1
func absdiff(a,b)
    if a >= b
        a=a-b
        return a
    else
        a=a-b
        a=a-a-a
        return a

print (absdiff (5,23))*/




/*_________________________________
Aufgabe 1.2
func odd(a)
    while a > 1
        //print a
        a = a - 2
    return a
        
print (odd (5))*/




/*_________________________________
Aufgabe 1.3
func max3(a,b,c)
    if a > b && a > c
        return a
    if b > a && b > c
        return b
    if c > b && c > a
        return c

print max3(25,15,20)*/




/*_________________________________
Aufgabe 1.4 
func max6(a,b,c,d,e,f)
    var temp = a
    if temp < b
        temp = b
        
    if temp < c
        temp = c
        
    if temp < d
        temp = d
        
    if temp < e
        temp = e
        
    if temp < f
        temp = f
    return temp
    
print max6(1,2,3,4,5,6)


func max9(a,b,c,d,e,f,g,h,i)
    var temp = a
    if temp < b
        temp = b
        
    if temp < c
        temp = c
        
    if temp < d
        temp = d
        
    if temp < e
        temp = e
        
    if temp < f
        temp = f
        
    if temp < g
        temp = g
        
    if temp < h
        temp = h
        
    if temp < i
        temp = i
    return temp
    
print max9(1,2,3,4,5,6,7,8,9)*/

/* Argumentation: Da die Variable temp von oben nach unten
    immer den größer vorkommenden Wert annimmt und keine
    Gleichen oder Kleineren, und die Funktion alle
    Zahlen abfragt, wird temp immer die größte
    vorkommende Zahl annehmen und am Ende ausgegeben.*/




/*_________________________________
Aufgabe 1.5 
//Vermutung: Ich denke anhand des Namens und weiterer
//Überlegung, dass diese Fkt. das quadrierte n berechnet.
//Der Code tut dies korrekt, da das berechnete y immer den
//gewünschten Wert ergibt

func quad(n)
    var a = n*n
    return a

print quad(6)*/





/*_________________________________
Aufgabe 1.6.1 und 1.6.2
func euklid(a,b)
    while a>b
        a = a - b
    return a
    while a<b
        a = b - a
    return a
    var y = a
    return y

print euklid(42,12)
// Antwort ist 6, das Ergebnis bei euklid(42,12) ist 6, stimmt überein
*/





/*_________________________________
Aufgabe 1.7
func modulo(a,b)
    while a >= b
        a = a - b
    
    return a

print modulo(17,4)*/




/*_________________________________
Aufgabe 1.8
func div(a,b)
    var i = 0
    while a >= b
        i = i + 1
        a = a - b
    
    return i

print div(496,124)*/




/*_________________________________
Aufgabe 1.9
Divisionen mit und ohne Rest wurden getestet.
Testergebnisse:
print div(17,4) = 4
print div(277,33) = 8
print div(24,6) = 4
print div(496,124) = 4
*/




/*_________________________________
Aufgabe 1.10
func teilbar(a,b)
    //if a== 0 || b == 0
        //print "Nicht erlaubt"
    //else
    //  (Der Rest der Fkt.)
        // ist nicht gefragt, y und x dürfen nur positive ganze
        //Zahlen sein
    
    while a >= b
        a = a - b
        
    if a == 0
        return 1
    else
        return 0

print teilbar(10,0)*/




/*_________________________________
Aufgabe 1.11
func teiler(n)
    var temp = n
    var i = 1
    if n == 1
        return 1
    else
        while n != 0
            i = i + 1
            n = temp
            while n >= i
                n = n - i
        return i

print teiler(63)*/




/*_________________________________
Aufgabe 1.12
func is_primz(n)
    var yes = 0
    var temp = n
    var i = 1
    while n != 0
        i = i + 1
        n = temp
        while n >= i
            n = n - i
    if i == temp
        yes = 1
    return yes

print is_primz(12)*/




/*_________________________________
Aufgabe 1.13
func teilerfor(n)
    var temp = n
    var teiler = 0
    
    for i = 2 to temp
        if n != 0
            n = temp
            for u = 1 to temp
                n = n - i
                if n <= 0
                    u = temp
        if n == 0
            teiler = i
            i = temp
            
    return teiler

print teilerfor(25)*/




/*_________________________________
Aufgabe 1.14
func next_prime(n)
    var neo_n = n + 1
    var temp = neo_n
    var i = 1
    var yes = 0
    
    while yes != 1
       
        while neo_n != 0
            i = i + 1
            neo_n = temp
            while neo_n >= i
                neo_n = neo_n - i
        if i == temp
            yes = 1    
        else
            temp = temp + 1
            neo_n = temp
            i = 1
    return temp

print next_prime(19)*/





/*_________________________________
Aufgabe 1.15
func next_primefor(n)
    var neo_n = n + 1
    var temp = neo_n
    var yes = 0
    var end = 3
    
    for f = 1 to end
        for i = 2 to temp
            for u = 1 to temp
                neo_n = neo_n - i
                if neo_n <= 1
                    u = temp
            if i == temp
                yes = 1
            if neo_n == 0
                i = temp
                
        if yes == 1
            f = end
        else
            f = 1
            temp = temp + 1
            neo_n = temp
    return temp

print next_primefor(8)*/





/*_________________________________
Aufgabe 1.16

a)
1. Muss ein Problem lösen
2. Muss nach Anleitung oder sogar selbsterklärend durchführbar sein
3. Muss irgendwann fertig werden (Endlicher Prozess)
4. Muss immer zum selben Ergebnis kommen

b)
1. Wenn die Schritte keinen Sinn ergeben, um zur Lösung zu kommen
2. Wenn es zu komplex auszuführen ist
3. Wenn es einen Fall gibt, wo der Algorithmus in einer unendlichen Schleife 
endet
4. Wenn es verschiedene Ergebnisse bei gleicher Eingabe liefert

*/







/*Array
var P =
[
72, 81, 90, 75, 87, 78, 90, 82, 61, 86,
97, 86, 84, 94, 47, 82, 92, 85, 93, 84,
55, 35, 81, 90, 66, 72, 77, 51, 37, 48
]

func printarray( P[1..n] )
    for i=1 to n
        print P[i]
printarray(P)


func maxi( P[1..n] )
    var m = P[1]
    var j = 1
    for i=2 to n
        if P[i] > m
            m = P[i]
            j = i
    return j

print maxi(P)*/